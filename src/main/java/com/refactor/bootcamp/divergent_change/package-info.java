package com.refactor.bootcamp.divergent_change;
/*
* 如果某个类经常因为不同的原因在不同方向上发生变化，发散式变化就出现了
* -> Extract class 把变化的职责提炼到新的类
* 我们希望如案件能够更容易被修改--毕竟如案件再怎么说本来就该是"软的"。一旦需要修改，我们希望能够跳到系统的某一个点，
* 只在该处做修改。如果不能做到这点，你就嗅出两种紧密相关的刺鼻味道中的一种了。
*
* 如果某个类经常因为不同的原因再不同的方向上发生变化，Divergent Change 就出现了。当你看这个一个人说：
* "呃，如果新加入一个数据库，我必须修改这三个函数；如果新出现一种工具，我必须修改这四个函数。"那么此时也许将
* 这个对象分成两个会更好，这么一来每个对象就可以只因为一种变化而需要修改。当然，往往只有在加入新数据库或者新金融工具
* 后，你才能发现这一点。针对某一个外界变化的所有响应修改，都只应该发生在单一类中，而这个新类内的所有内容都应该发硬此变化
* 。为此，你应该找出某特定原因而造成的所有变化，然后运用Extract Class 将他们提炼到另一个类中。
*
*/