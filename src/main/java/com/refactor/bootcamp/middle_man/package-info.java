package com.refactor.bootcamp.middle_man;
/*
* 中间人
*     对象的基本特征之一就是封装---对外部世界隐藏其内部细节.封装往往伴随着委托(delegate).
* 比如你问主管是否有时间参加一个会议,他就把这个消息"委托"给他的记事本，然后才能回答你.
* 你没有必要知道这位主管到底使用的是传统记事本或者电子记事本亦或秘书来记录自己的约会.
*
*  1.人们可能过度运用委托.你也许会看到某个类接口有一半的函数都委托给其它类,这样就是过度运用
*   ->Remove Middle Man 直接和真正的负责的对象打交道
*  2. 如果这样不干实事的函数只有少数几个运用
*   ->Inline Method 把他们放进调用端
*  3. 如果这些中间人(Middle Man)还有其它行为，可以运用
*   ->Replace Delegation with Inheritance 把它变成实责对象的子类,这样既可以扩展愿对象
*   行为，又不必担心那么多委托动作.
*
*/